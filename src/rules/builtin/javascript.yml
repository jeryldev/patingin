# JavaScript Anti-Pattern Rules

- id: "console_log_production"
  name: "Console.log in Production"
  language: "javascript"
  severity: "major"
  description: "Console statements should not be left in production code"
  detection_method:
    type: "regex"
    pattern: "console\\.(log|warn|error|info|debug)\\s*\\("
  fix_suggestion: "Remove console statements or replace with proper logging framework"
  source_url: "https://eslint.org/docs/rules/no-console"
  claude_code_fixable: true
  examples:
    - bad: "console.log('Debug info:', data)"
      good: "logger.debug('Debug info:', data)"
      explanation: "Use structured logging instead of console statements"
  tags: ["production", "debugging"]
  enabled: true

- id: "var_declaration"
  name: "Var Declaration"
  language: "javascript"
  severity: "major"
  description: "Using var can lead to hoisting issues and scope confusion"
  detection_method:
    type: "regex"
    pattern: "\\bvar\\s+\\w+"
  fix_suggestion: "Use let or const instead of var"
  source_url: "https://eslint.org/docs/rules/no-var"
  claude_code_fixable: true
  examples:
    - bad: "var name = 'John'"
      good: "const name = 'John'"
      explanation: "const and let have block scope and prevent hoisting issues"
  tags: ["scope", "es6"]
  enabled: true

- id: "eval_usage"
  name: "Eval Usage"
  language: "javascript"
  severity: "critical"
  description: "eval() can execute arbitrary code and poses security risks"
  detection_method:
    type: "regex"
    pattern: "\\beval\\s*\\("
  fix_suggestion: "Avoid eval() and use safer alternatives like JSON.parse() for data"
  source_url: "https://eslint.org/docs/rules/no-eval"
  claude_code_fixable: false
  examples:
    - bad: "eval('var x = ' + userInput)"
      good: "const data = JSON.parse(userInput)"
      explanation: "JSON.parse is safer for parsing data from external sources"
  tags: ["security", "code-injection"]
  enabled: true

- id: "double_equals"
  name: "Double Equals Comparison"
  language: "javascript"
  severity: "major"
  description: "Using == can lead to unexpected type coercion"
  detection_method:
    type: "regex"
    pattern: "[^=!]==[^=]|[^=!]!=[^=]"
  fix_suggestion: "Use === and !== for strict equality checks"
  source_url: "https://eslint.org/docs/rules/eqeqeq"
  claude_code_fixable: true
  examples:
    - bad: "if (x == '5')"
      good: "if (x === '5')"
      explanation: "Strict equality prevents unexpected type coercion"
  tags: ["comparison", "type-safety"]
  enabled: true

- id: "function_in_loop"
  name: "Function Creation in Loop"
  language: "javascript"
  severity: "major"
  description: "Creating functions inside loops can cause performance and closure issues"
  detection_method:
    type: "regex"
    pattern: "for\\s*\\([^)]*\\)\\s*\\{[^}]*function\\s*\\("
  fix_suggestion: "Move function outside loop or use bind/arrow functions appropriately"
  source_url: "https://eslint.org/docs/rules/no-loop-func"
  claude_code_fixable: false
  examples:
    - bad: "for (let i = 0; i < 10; i++) { setTimeout(function() { console.log(i); }, 100); }"
      good: "for (let i = 0; i < 10; i++) { setTimeout(() => console.log(i), 100); }"
      explanation: "Arrow functions or proper binding preserve the intended closure"
  tags: ["performance", "closures"]
  enabled: true

- id: "global_variables"
  name: "Global Variable Declaration"
  language: "javascript"
  severity: "major"
  description: "Global variables can cause naming conflicts and make code harder to maintain"
  detection_method:
    type: "regex"
    pattern: "^\\s*(var|let|const)\\s+\\w+\\s*="
  fix_suggestion: "Wrap code in modules or functions to avoid global scope pollution"
  source_url: "https://eslint.org/docs/rules/no-implicit-globals"
  claude_code_fixable: false
  examples:
    - bad: "var globalCounter = 0"
      good: "(function() { var counter = 0; })();"
      explanation: "Use modules or IIFE to contain variables in local scope"
  tags: ["scope", "globals"]
  enabled: true

- id: "unhandled_promise"
  name: "Unhandled Promise Rejection"
  language: "javascript"
  severity: "critical"
  description: "Promises should always handle rejections to prevent silent failures"
  detection_method:
    type: "regex"
    pattern: "\\.then\\s*\\([^)]*\\)\\s*[^.c]"
  fix_suggestion: "Add .catch() handler to handle promise rejections"
  source_url: "https://eslint.org/docs/rules/prefer-promise-reject-errors"
  claude_code_fixable: true
  examples:
    - bad: "fetch('/api/data').then(response => process(response))"
      good: "fetch('/api/data').then(response => process(response)).catch(error => handleError(error))"
      explanation: "Always handle promise rejections to prevent unhandled errors"
  tags: ["async", "error-handling"]
  enabled: true

- id: "callback_hell"
  name: "Callback Hell"
  language: "javascript"
  severity: "major"
  description: "Deeply nested callbacks make code hard to read and maintain"
  detection_method:
    type: "regex"
    pattern: "function\\s*\\([^)]*\\)\\s*\\{[^}]*function\\s*\\([^)]*\\)\\s*\\{[^}]*function\\s*\\([^)]*\\)\\s*\\{"
  fix_suggestion: "Use Promises, async/await, or named functions to flatten callback structure"
  source_url: "https://developer.mozilla.org/en-US/docs/Glossary/Callback_hell"
  claude_code_fixable: false
  examples:
    - bad: "getData(function(a) { getMoreData(a, function(b) { getEvenMoreData(b, function(c) { ... }); }); });"
      good: "const a = await getData(); const b = await getMoreData(a); const c = await getEvenMoreData(b);"
      explanation: "async/await makes asynchronous code much more readable"
  tags: ["async", "readability"]
  enabled: true